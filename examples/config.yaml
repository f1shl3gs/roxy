# If this is not set, it will be set automatically
#
# Optional
# worker: 4

# resolver used for resolve the domains of providers, DoH and shadowsocks server
resolvers:
  - 114.114.114.114:53

# sniffing host from http's request header, or https' SNI
# root certificate is not need to be installed.
# sniffing: true

# Configuration for logs
#
# Optional
log:
  # Available values is `trace`, `debug`, `info`, `warn` and `error`.
  # Note: Release build Roxy will not allowed `trace`.
  #
  # Required
  level: info

  # Sometimes timestamp is redundant, for example, running this in container
  #
  # Optional
  timestamp: true

# RESTful API for Roxy stats
#
# Optional
controller:
  # Controller's listen address
  #
  # Required
  listen: 0.0.0.0:9000

  # If it is set all request must contain the Authorization header,
  # e.g. "Authorization: Bearer YOUR_PASSWORD"
  #
  # optional
  # secret: password

# DNS server
#
# Required
dns:
  # TCP and UDP are listened
  #
  # Required
  listen: 0.0.0.0:53

  # works like /etc/hosts
  #
  # Optional
  hosts:
    foo.com: 127.0.0.2

  # Cache dns response from upstream
  #
  # Optional
  cache:
    ttl: 30s
    size: 512

  # Reject some dns request by response with no records, it could be used
  # for removing ads
  #
  # Optional
  reject:
    endpoint: https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/reject.txt
    # cron might be a better solution, with cron we can update it as soon as possible
    interval: 1h

  # If the request domain match this it should be proxy by outbounds
  #
  # Optional
  hijack:
    endpoint: https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/gfw.txt
    # cron might be a better solution, with cron we can update it as soon as possible
    interval: 1h
    # return this address to client, it should be the address Roxy listen to.
    hijack: 127.0.0.1

  # If the request domain not match `hosts`, `reject` or `proxy`,
  # this will handle the request
  #
  # Required
  upstream:
    nameservers:
      - 114.114.114.114:53

# upstream is used to define servers that can be referenced by THP
#
# Required
upstream:
  # Specifies a load balance method
  #   1. `best`: the lowest latency server
  #   2. `etld`: requests are distributed between servers based on request domain,
  #      dead server will be skipped.
  #
  # Optional, default best
  load_balance: best

  # Check proxy's health
  #
  # Required
  check:
    # Interval seconds between each check
    #
    # Required
    interval: 30s

    # Timeout for check servers
    # Required
    timeout: 5s

  # Load proxy server lists dynamically
  #
  # Required
  provider:
    # endpoint is the uri to fetch servers, The content is encoded with base64,
    # after decode, the content is `ss` urls, looks like
    # ss://YWVzLTI1Ni1jZmI6cGFzc3dvcmQ@127.0.0.1:8388/?plugin=obfs-local%3Bobfs%3Dhttp%3Bobfs-host%3Dwww.baidu.com
    #
    # Required
    # NOTE: replace this with your own uri
    endpoint: https://for.example.com/blah/blah

    # Update servers every 24h, if this not specified, it will never update it
    #
    # Optional
    interval: 24h

# Transparent Http Proxy, this must works with dns hijack.
# This component will read the first 1024 bytes of the TCP connect,
# and parse it.
#   1. Start with `GET`, `POST` and other HTTP's request head, then parse `Host` header,
#      if roxy cannot find this `Host` header, the connection will be closed.
#   2. Start with Handshake(ascii define, u8 = 22), the parse TLS' sni extention to find
#      which domain the request want to connect.
#
# Required
thp:
  # Address listen to
  #
  # Required
  listen:
    - 0.0.0.0:80
    - 0.0.0.0:443